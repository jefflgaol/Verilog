$date
	Mon Dec  7 18:05:41 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_shift_register_16_bit $end
$var wire 16 ! h [15:0] $end
$var wire 16 " g [15:0] $end
$var wire 16 # f [15:0] $end
$var wire 16 $ e [15:0] $end
$var wire 16 % d [15:0] $end
$var wire 16 & c [15:0] $end
$var wire 16 ' b [15:0] $end
$var wire 16 ( a [15:0] $end
$var reg 1 ) clock $end
$var reg 16 * din [15:0] $end
$var reg 1 + reset $end
$scope module comp_1 $end
$var wire 1 ) Clock $end
$var wire 16 , Din [15:0] $end
$var wire 1 + Reset $end
$var reg 16 - A [15:0] $end
$var reg 16 . B [15:0] $end
$var reg 16 / C [15:0] $end
$var reg 16 0 D [15:0] $end
$var reg 16 1 E [15:0] $end
$var reg 16 2 F [15:0] $end
$var reg 16 3 G [15:0] $end
$var reg 16 4 H [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b1010 ,
1+
b1010 *
0)
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#1
b1010 (
b1010 -
1)
#2
0)
b1011 *
b1011 ,
#3
b1010 '
b1010 .
b1011 (
b1011 -
1)
#4
0)
b1100 *
b1100 ,
#5
b1010 &
b1010 /
b1011 '
b1011 .
b1100 (
b1100 -
1)
#6
0)
b10101100 *
b10101100 ,
#7
b1010 %
b1010 0
b1011 &
b1011 /
b1100 '
b1100 .
b10101100 (
b10101100 -
1)
#8
b0 !
b0 4
b0 "
b0 3
b0 #
b0 2
b0 $
b0 1
b0 %
b0 0
b0 &
b0 /
b0 '
b0 .
b0 (
b0 -
0)
b110010 *
b110010 ,
0+
#9
1)
#10
0)
b1010000 *
b1010000 ,
1+
#11
b1010000 (
b1010000 -
1)
#12
0)
b100000 *
b100000 ,
#13
b1010000 '
b1010000 .
b100000 (
b100000 -
1)
#14
0)
b1011 *
b1011 ,
#15
b1010000 &
b1010000 /
b100000 '
b100000 .
b1011 (
b1011 -
1)
#16
0)
b1100 *
b1100 ,
#17
b1010000 %
b1010000 0
b100000 &
b100000 /
b1011 '
b1011 .
b1100 (
b1100 -
1)
#18
0)
b10101100 *
b10101100 ,
#19
b1010000 $
b1010000 1
b100000 %
b100000 0
b1011 &
b1011 /
b1100 '
b1100 .
b10101100 (
b10101100 -
1)
#20
0)
b110010 *
b110010 ,
#21
b1010000 #
b1010000 2
b100000 $
b100000 1
b1011 %
b1011 0
b1100 &
b1100 /
b10101100 '
b10101100 .
b110010 (
b110010 -
1)
#22
0)
b1010000 *
b1010000 ,
#23
b1010000 "
b1010000 3
b100000 #
b100000 2
b1011 $
b1011 1
b1100 %
b1100 0
b10101100 &
b10101100 /
b110010 '
b110010 .
b1010000 (
b1010000 -
1)
#24
0)
b100000 *
b100000 ,
#25
b1010000 !
b1010000 4
b100000 "
b100000 3
b1011 #
b1011 2
b1100 $
b1100 1
b10101100 %
b10101100 0
b110010 &
b110010 /
b1010000 '
b1010000 .
b100000 (
b100000 -
1)
#26
0)
b1010000 *
b1010000 ,
#27
b100000 !
b100000 4
b1011 "
b1011 3
b1100 #
b1100 2
b10101100 $
b10101100 1
b110010 %
b110010 0
b1010000 &
b1010000 /
b100000 '
b100000 .
b1010000 (
b1010000 -
1)
#28
0)
b100000 *
b100000 ,
#29
b1011 !
b1011 4
b1100 "
b1100 3
b10101100 #
b10101100 2
b110010 $
b110010 1
b1010000 %
b1010000 0
b100000 &
b100000 /
b1010000 '
b1010000 .
b100000 (
b100000 -
1)
#30
0)
b1011 *
b1011 ,
#31
b1100 !
b1100 4
b10101100 "
b10101100 3
b110010 #
b110010 2
b1010000 $
b1010000 1
b100000 %
b100000 0
b1010000 &
b1010000 /
b100000 '
b100000 .
b1011 (
b1011 -
1)
#32
0)
b1100 *
b1100 ,
#33
b10101100 !
b10101100 4
b110010 "
b110010 3
b1010000 #
b1010000 2
b100000 $
b100000 1
b1010000 %
b1010000 0
b100000 &
b100000 /
b1011 '
b1011 .
b1100 (
b1100 -
1)
#34
0)
b10101100 *
b10101100 ,
#35
b110010 !
b110010 4
b1010000 "
b1010000 3
b100000 #
b100000 2
b1010000 $
b1010000 1
b100000 %
b100000 0
b1011 &
b1011 /
b1100 '
b1100 .
b10101100 (
b10101100 -
1)
#36
0)
b110010 *
b110010 ,
#37
b1010000 !
b1010000 4
b100000 "
b100000 3
b1010000 #
b1010000 2
b100000 $
b100000 1
b1011 %
b1011 0
b1100 &
b1100 /
b10101100 '
b10101100 .
b110010 (
b110010 -
1)
#38
0)
b1010000 *
b1010000 ,
#39
b100000 !
b100000 4
b1010000 "
b1010000 3
b100000 #
b100000 2
b1011 $
b1011 1
b1100 %
b1100 0
b10101100 &
b10101100 /
b110010 '
b110010 .
b1010000 (
b1010000 -
1)
#40
0)
b100000 *
b100000 ,
